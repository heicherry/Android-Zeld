plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.ai.zeld"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        packagingOptions{
            exclude "META-INF/level1_debug.kotlin_module"
            exclude "META-INF/level1_release.kotlin_module"
        }
    }

    signingConfigs {
        signConfig {
            storeFile file ('../keystore/keystore.jks')
            storePassword 'zeld2021'
            keyAlias 'zeld'
            keyPassword 'zeld2021'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.signConfig
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}


// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives {
    doFirst {
        file("libs/armeabi/").mkdirs()
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.copy().files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
            if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if(outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}


dependencies {
    configurations { natives }
    natives Deps.box2d_native
    natives Deps.box2d_native_v7a
    natives Deps.box2d_native_v8a
    natives Deps.box2d_native_x86
    natives Deps.box2d_native_x86_64

    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'


    // common
    implementation(project(":common:basesection"))
    implementation(project(":common:service"))
    implementation(project(":common:util"))
    implementation(project(":common:media"))

    // business
    implementation(project(":business:storyline"))
    implementation(project(":business:splash"))
    implementation(project(":business:world"))

    // common business
    implementation(project(":commonbusiness:playground"))

    //sections
    implementation(project(":business:wave:level1"))
    implementation(project(":business:parabola:level1"))
    implementation(project(":business:ellipse:level1"))
}